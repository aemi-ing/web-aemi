---
import galeria from "../data/galeria.json";
---

<section class="gallery-section" id="gallery">
  <div class="gallery-header">
    <h2>{galeria.titulo}</h2>
    <p>{galeria.descripcion}</p>
  </div>

  <div class="carousel-container">
    <div class="carousel-wrapper">
      <button class="carousel-btn carousel-btn-prev" id="prevBtn">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
          <path
            d="M15 18L9 12L15 6"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
        </svg>
      </button>

      <div class="carousel-track" id="carouselTrack">
        {
          galeria.slides.map((slide) => (
            <div class="carousel-slide">
              <img src={slide.imagen} alt={slide.alt} loading="lazy" />
              <div class="slide-overlay">
                <h3>{slide.titulo}</h3>
                <p>{slide.descripcion}</p>
              </div>
            </div>
          ))
        }
      </div>

      <button class="carousel-btn carousel-btn-next" id="nextBtn">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
          <path
            d="M9 18L15 12L9 6"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
        </svg>
      </button>
    </div>

    <!-- Indicadores -->
    <div class="carousel-dots" id="carouselDots"></div>
  </div>
</section>

<script>
  class GalleryCarousel {
    track: HTMLElement | null;
    slides: NodeListOf<Element> | [];
    prevBtn: HTMLElement | null;
    nextBtn: HTMLElement | null;
    dotsContainer: HTMLElement | null;
    currentIndex: number;
    isTransitioning: boolean;
    autoPlayInterval: ReturnType<typeof setInterval> | null;
    autoPlayDelay: number;
    dots: NodeListOf<Element> | undefined;

    constructor() {
      this.track = document.getElementById("carouselTrack");
      this.slides = this.track
        ? this.track.querySelectorAll(".carousel-slide")
        : [];
      this.prevBtn = document.getElementById("prevBtn");
      this.nextBtn = document.getElementById("nextBtn");
      this.dotsContainer = document.getElementById("carouselDots");

      this.currentIndex = 0;
      this.isTransitioning = false;
      this.autoPlayInterval = null;
      this.autoPlayDelay = 5000;

      if (this.slides.length > 0) {
        this.init();
      }
    }

    init() {
      this.createDots();
      this.bindEvents();
      this.updateCarousel();
      this.startAutoPlay();
    }

    createDots() {
      if (!this.dotsContainer) return;

      // Store in a local variable to help TypeScript understand it's non-null
      const dotsContainer = this.dotsContainer;

      this.slides.forEach((_, index) => {
        const dot = document.createElement("button");
        dot.className = "carousel-dot";
        dot.setAttribute("aria-label", `Ir a imagen ${index + 1}`);
        dot.addEventListener("click", () => this.goToSlide(index));
        dotsContainer.appendChild(dot);
      });

      this.dots = dotsContainer.querySelectorAll(".carousel-dot");
    }

    bindEvents() {
      if (this.prevBtn) {
        this.prevBtn.addEventListener("click", () => this.prevSlide());
      }

      if (this.nextBtn) {
        this.nextBtn.addEventListener("click", () => this.nextSlide());
      }

      // Pausar autoplay al hacer hover
      if (this.track) {
        this.track.addEventListener("mouseenter", () => this.stopAutoPlay());
        this.track.addEventListener("mouseleave", () => this.startAutoPlay());
      }

      // Touch events para móviles
      let startX = 0;
      let endX = 0;

      if (this.track) {
        this.track.addEventListener(
          "touchstart",
          (e) => {
            startX = e.touches[0].clientX;
            this.stopAutoPlay();
          },
          { passive: true },
        );

        this.track.addEventListener(
          "touchend",
          (e) => {
            endX = e.changedTouches[0].clientX;
            const diff = startX - endX;

            if (Math.abs(diff) > 50) {
              if (diff > 0) {
                this.nextSlide();
              } else {
                this.prevSlide();
              }
            }

            this.startAutoPlay();
          },
          { passive: true },
        );
      }

      // Navegación por teclado
      document.addEventListener("keydown", (e) => {
        if (e.key === "ArrowLeft") this.prevSlide();
        if (e.key === "ArrowRight") this.nextSlide();
      });

      // Pausar cuando la página no está visible
      document.addEventListener("visibilitychange", () => {
        if (document.hidden) {
          this.stopAutoPlay();
        } else {
          this.startAutoPlay();
        }
      });
    }

    updateCarousel() {
      if (this.isTransitioning || !this.track) return;

      this.isTransitioning = true;

      // Actualizar posición del track
      const translateX = -this.currentIndex * 100;
      this.track.style.transform = `translateX(${translateX}%)`;

      // Actualizar dots
      if (this.dots) {
        this.dots.forEach((dot, index) => {
          dot.classList.toggle("active", index === this.currentIndex);
        });
      }

      // Resetear flag de transición
      setTimeout(() => {
        this.isTransitioning = false;
      }, 600);
    }

    goToSlide(index: number) {
      if (this.isTransitioning || index === this.currentIndex) return;
      this.currentIndex = index;
      this.updateCarousel();
      this.resetAutoPlay();
    }

    nextSlide() {
      if (this.isTransitioning) return;
      this.currentIndex = (this.currentIndex + 1) % this.slides.length;
      this.updateCarousel();
      this.resetAutoPlay();
    }

    prevSlide() {
      if (this.isTransitioning) return;
      this.currentIndex =
        (this.currentIndex - 1 + this.slides.length) % this.slides.length;
      this.updateCarousel();
      this.resetAutoPlay();
    }

    startAutoPlay() {
      this.stopAutoPlay();
      this.autoPlayInterval = setInterval(() => {
        this.nextSlide();
      }, this.autoPlayDelay);
    }

    stopAutoPlay() {
      if (this.autoPlayInterval) {
        clearInterval(this.autoPlayInterval);
        this.autoPlayInterval = null;
      }
    }

    resetAutoPlay() {
      this.stopAutoPlay();
      this.startAutoPlay();
    }
  }

  // Inicializar cuando el DOM esté listo
  document.addEventListener("DOMContentLoaded", () => {
    new GalleryCarousel();
  });
</script>

<style>
  .gallery-section {
    background: #1c398e;
    padding: 64px 80px;
    color: #f8fafc;
    padding: 50px 0;
    color: white;
    position: relative;
  }

  .gallery-header {
    text-align: center;
    margin-bottom: 40px;
  }

  .gallery-header h2 {
    font-size: 2.25rem;
    font-weight: 700;
    margin-bottom: 12px;
    background: white;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .gallery-header p {
    font-size: 1.125rem;
    opacity: 0.8;
    max-width: 500px;
    margin: 0 auto;
    line-height: 1.5;
    color: white;
  }

  .carousel-container {
    position: relative;
    max-width: 825px;
    aspect-ratio: 16/9;
    margin: 0 auto;
  }

  .carousel-wrapper {
    position: relative;
    overflow: hidden;
    border-radius: 16px;
    box-shadow: 0 20px 50px rgba(0, 0, 0, 0.25);
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
  }

  .carousel-track {
    display: flex;
    transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    will-change: transform;
  }

  .carousel-slide {
    min-width: 100%;
    position: relative;
    aspect-ratio: 16/9;
    overflow: hidden;
  }

  .carousel-slide img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.6s ease;
  }

  .carousel-slide:hover img {
    transform: scale(1.05);
  }

  .slide-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.9));
    padding: 30px 25px 20px;
    transform: translateY(100%);
    transition: transform 0.3s ease;
  }

  .carousel-slide:hover .slide-overlay {
    transform: translateY(0);
  }

  .slide-overlay h3 {
    font-size: 1.1rem;
    font-weight: 600;
    margin-bottom: 6px;
    color: white;
  }

  .slide-overlay p {
    font-size: 0.85rem;
    opacity: 0.9;
    margin: 0;
    color: rgb(255, 255, 255);
    line-height: 1.3;
  }

  .carousel-btn {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(248, 250, 252, 0.9);
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    z-index: 10;
    backdrop-filter: blur(10px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
  }

  .carousel-btn:hover {
    background: #1e3a8a;
    transform: translateY(-50%) scale(1.1);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
  }

  .carousel-btn-prev {
    left: 15px;
  }

  .carousel-btn-next {
    right: 15px;
  }

  .carousel-btn svg {
    color: #4561b9;
  }

  .carousel-btn:hover svg {
    color: rgb(255, 255, 255);
  }

  .carousel-dots {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin-top: 25px;
  }

  .carousel-dot {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background: rgba(30, 58, 138, 0.4);
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
  }

  .carousel-dot.active {
    background: #1d398f;
    transform: scale(1.2);
  }

  .carousel-dot.active::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 18px;
    height: 18px;
    border: 2px solid rgba(30, 58, 138, 0.3);
    border-radius: 50%;
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0% {
      transform: translate(-50%, -50%) scale(1);
      opacity: 1;
    }
    100% {
      transform: translate(-50%, -50%) scale(1.5);
      opacity: 0;
    }
  }

  .carousel-slide img {
    background: linear-gradient(
      90deg,
      rgba(255, 255, 255, 0.1) 25%,
      rgba(255, 255, 255, 0.2) 50%,
      rgba(255, 255, 255, 0.1) 75%
    );
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
  }

  .carousel-slide img[src] {
    background: none;
    animation: none;
  }

  @keyframes loading {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }

  @media (max-width: 768px) {
    .gallery-section {
      padding: 64px 40px;
    }

    .gallery-header {
      max-width: 1000px;
      width: 100%;
    }

    .gallery-header h2 {
      font-size: 1.875rem;
    }

    .carousel-container {
      max-width: 100%;
    }

    .carousel-btn {
      width: 35px;
      height: 35px;
    }

    .carousel-btn-prev {
      left: 10px;
    }

    .carousel-btn-next {
      right: 10px;
    }

    .carousel-btn svg {
      width: 18px;
      height: 18px;
    }

    .slide-overlay {
      padding: 20px 15px 15px;
    }

    .slide-overlay h3 {
      font-size: 1rem;
    }

    .slide-overlay p {
      font-size: 0.8rem;
    }
  }

  @media (max-width: 480px) {
    .container {
      padding: 0 15px;
    }

    .gallery-header p {
      max-width: 1000px;
    }

    .carousel-wrapper {
      border-radius: 12px;
    }

    .carousel-btn {
      width: 32px;
      height: 32px;
    }

    .carousel-btn svg {
      width: 16px;
      height: 16px;
    }

    .carousel-dots {
      gap: 8px;
      margin-top: 20px;
    }

    .carousel-dot {
      width: 8px;
      height: 8px;
    }
  }
</style>
